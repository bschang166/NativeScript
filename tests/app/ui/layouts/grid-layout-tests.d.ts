import { GridLayout, ItemSpec } from "tns-core-modules/ui/layouts/grid-layout";
import * as testModule from "../../ui-test";
declare class RemovalTrackingGridLayout extends GridLayout {
    removedRows: number;
    removedCols: number;
    _onRowRemoved(itemSpec: ItemSpec, index: number): void;
    _onColumnRemoved(itemSpec: ItemSpec, index: number): void;
}
export declare class GridLayoutTest extends testModule.UITest<RemovalTrackingGridLayout> {
    create(): RemovalTrackingGridLayout;
    test_recycling(): void;
    test_item_recycling(): void;
    private row;
    private rowSpan;
    private col;
    private colSpan;
    private prepareGridLayout;
    test_row_defaultValue(): void;
    test_rowSpan_defaultValue(): void;
    test_column_defaultValue(): void;
    test_columnSpan_defaultValue(): void;
    test_getRow_shouldThrow_onNullValues(): void;
    test_getRowSpan_shouldThrow_onNullValues(): void;
    test_getColumn_shouldThrow_onNullValues(): void;
    test_getColumnSpan_shouldThrow_onNullValues(): void;
    test_setRow_shouldThrow_onNullValues(): void;
    test_setRowSpan_shouldThrow_onNullValues(): void;
    test_setColumn_shouldThrow_onNullValues(): void;
    test_setColumnSpan_shouldThrow_onNullValues(): void;
    test_setRow_shouldNotThrow_onNegativeValues(): void;
    test_setRowSpan_shouldNotThrow_onNotPositiveValues(): void;
    test_setColumn_shouldNotThrow_onNegativeValues(): void;
    test_setColumnSpan_shouldNotThrow_onNotPositiveValues(): void;
    test_addRow_shouldThrow_onNullValues(): void;
    test_addColumn_shouldThrow_onNullValues(): void;
    test_removeRow_shouldThrow_onNullValues(): void;
    test_removeColumn_shouldThrow_onNullValues(): void;
    test_removeColumns(): void;
    test_removeRows(): void;
    test_removeChildren(): void;
    test_measuredWidth_when_not_stretched_single_column(): void;
    test_measuredWidth_when_not_stretched_two_columns(): void;
    test_measuredWidth_when_not_stretched_three_columns(): void;
    test_getRows_shouldNotReturnNULL(): void;
    test_getColumns_shouldNotReturnNULL(): void;
    test_ItemSpec_actualLength_defaultValue(): void;
    test_ItemSpec_constructor_throws_onNegativeValue(): void;
    test_ItemSpec_constructor_doesnt_throw_onCorrectType(): void;
    test_ItemSpec_constructor_throws_onWrongType(): void;
    test_ItemSpec_auto(): void;
    test_ItemSpec_unitType_pixel(): void;
    test_ItemSpec_unitType(): void;
    test_desiredSize_isCorrect(): void;
    test_columnsActualWidth_isCorrect(): void;
    test_rowsActualHeight_isCorrect(): void;
    test_Measure_and_Layout_Children_withCorrect_size(): void;
    test_ColumnWidth_when_4stars_and_width_110(): void;
    test_margins_and_verticalAlignment_center(): void;
    test_set_columns_in_XML_comma_separator(): void;
    test_set_columns_in_XML_space_separator(): void;
    private assertColumns;
    test_set_rows_in_XML_comma_separator(): void;
    test_set_rows_in_XML_space_separator(): void;
    private assertRows;
    test_padding(): void;
    test_codesnippets: () => void;
    test_percent_support_nativeLayoutParams_are_correct(): void;
    test_layout_correctnes(): void;
    test_parse_should_call_protected_methods(): void;
    test_columns_widths(): void;
}
export declare function createTestCase(): GridLayoutTest;
export {};
//# sourceMappingURL=grid-layout-tests.d.ts.map