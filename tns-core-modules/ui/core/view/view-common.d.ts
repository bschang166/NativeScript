import { View as ViewDefinition, Point, Size, Color, dip } from ".";
import { ViewBase, Property, EventData } from "../view-base";
import { HorizontalAlignment, VerticalAlignment, Visibility, Length, PercentLength } from "../../styling/style-properties";
import { GesturesObserver, GestureTypes, GestureEventData } from "../../gestures";
import { LinearGradient } from "../../styling/linear-gradient";
export * from "../../styling/style-properties";
export * from "../view-base";
export { LinearGradient };
import * as am from "../../animation";
export declare function CSSType(type: string): ClassDecorator;
export declare function PseudoClassHandler(...pseudoClasses: string[]): MethodDecorator;
export declare const _rootModalViews: ViewBase[];
export declare abstract class ViewCommon extends ViewBase implements ViewDefinition {
    static layoutChangedEvent: string;
    static shownModallyEvent: string;
    static showingModallyEvent: string;
    protected _closeModalCallback: Function;
    _modalParent: ViewCommon;
    private _modalContext;
    private _modal;
    private _measuredWidth;
    private _measuredHeight;
    private _isLayoutValid;
    private _cssType;
    private _localAnimations;
    _currentWidthMeasureSpec: number;
    _currentHeightMeasureSpec: number;
    _setMinWidthNative: (value: Length) => void;
    _setMinHeightNative: (value: Length) => void;
    _gestureObservers: {};
    css: string;
    addCss(cssString: string): void;
    addCssFile(cssFileName: string): void;
    _updateStyleScope(cssFileName?: string, cssString?: string, css?: string): void;
    private setScopeProperty;
    _setupAsRootView(context: any): void;
    observe(type: GestureTypes, callback: (args: GestureEventData) => void, thisArg?: any): void;
    getGestureObservers(type: GestureTypes): Array<GesturesObserver>;
    addEventListener(arg: string | GestureTypes, callback: (data: EventData) => void, thisArg?: any): void;
    removeEventListener(arg: string | GestureTypes, callback?: any, thisArg?: any): void;
    _onLivesync(): boolean;
    onBackPressed(): boolean;
    _getFragmentManager(): any;
    showModal(): ViewDefinition;
    closeModal(...args: any[]): void;
    readonly modal: ViewCommon;
    protected _showNativeModalView(parent: ViewCommon, context: any, closeCallback: Function, fullscreen?: boolean, animated?: boolean, stretched?: boolean): void;
    protected _hideNativeModalView(parent: ViewCommon): void;
    protected _raiseLayoutChangedEvent(): void;
    protected _raiseShownModallyEvent(): void;
    protected _raiseShowingModallyEvent(): void;
    private _isEvent;
    private _disconnectGestureObservers;
    borderColor: string | Color;
    borderTopColor: Color;
    borderRightColor: Color;
    borderBottomColor: Color;
    borderLeftColor: Color;
    borderWidth: string | Length;
    borderTopWidth: Length;
    borderRightWidth: Length;
    borderBottomWidth: Length;
    borderLeftWidth: Length;
    borderRadius: string | Length;
    borderTopLeftRadius: Length;
    borderTopRightRadius: Length;
    borderBottomRightRadius: Length;
    borderBottomLeftRadius: Length;
    color: Color;
    background: string;
    backgroundColor: Color;
    backgroundImage: string | LinearGradient;
    minWidth: Length;
    minHeight: Length;
    width: PercentLength;
    height: PercentLength;
    margin: string | PercentLength;
    marginLeft: PercentLength;
    marginTop: PercentLength;
    marginRight: PercentLength;
    marginBottom: PercentLength;
    horizontalAlignment: HorizontalAlignment;
    verticalAlignment: VerticalAlignment;
    visibility: Visibility;
    opacity: number;
    rotate: number;
    translateX: dip;
    translateY: dip;
    scaleX: number;
    scaleY: number;
    automationText: string;
    originX: number;
    originY: number;
    isEnabled: boolean;
    isUserInteractionEnabled: boolean;
    readonly isLayoutValid: boolean;
    cssType: string;
    readonly isLayoutRequired: boolean;
    measure(widthMeasureSpec: number, heightMeasureSpec: number): void;
    layout(left: number, top: number, right: number, bottom: number): void;
    getMeasuredWidth(): number;
    getMeasuredHeight(): number;
    getMeasuredState(): number;
    setMeasuredDimension(measuredWidth: number, measuredHeight: number): void;
    requestLayout(): void;
    abstract onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
    abstract onLayout(left: number, top: number, right: number, bottom: number): void;
    abstract layoutNativeView(left: number, top: number, right: number, bottom: number): void;
    static resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number;
    static combineMeasuredStates(curState: number, newState: any): number;
    static layoutChild(parent: ViewDefinition, child: ViewDefinition, left: number, top: number, right: number, bottom: number, setFrame?: boolean): void;
    static measureChild(parent: ViewCommon, child: ViewCommon, widthMeasureSpec: number, heightMeasureSpec: number): {
        measuredWidth: number;
        measuredHeight: number;
    };
    private static getMeasureSpec;
    _setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean;
    _getCurrentLayoutBounds(): {
        left: number;
        top: number;
        right: number;
        bottom: number;
    };
    _setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): {
        boundsChanged: boolean;
        sizeChanged: boolean;
    };
    eachChild(callback: (child: ViewBase) => boolean): void;
    eachChildView(callback: (view: ViewDefinition) => boolean): void;
    _getNativeViewsCount(): number;
    _eachLayoutView(callback: (View: any) => void): void;
    focus(): boolean;
    getLocationInWindow(): Point;
    getLocationOnScreen(): Point;
    getLocationRelativeTo(otherView: ViewDefinition): Point;
    getActualSize(): Size;
    animate(animation: any): am.AnimationPromise;
    createAnimation(animation: any): am.Animation;
    _removeAnimation(animation: am.Animation): boolean;
    resetNativeView(): void;
    _setNativeViewFrame(nativeView: any, frame: any): void;
    _getValue(): never;
    _setValue(): never;
    _updateEffectiveLayoutValues(parentWidthMeasureSize: number, parentWidthMeasureMode: number, parentHeightMeasureSize: number, parentHeightMeasureMode: number): void;
    _setNativeClipToBounds(): void;
    _redrawNativeBackground(value: any): void;
    _onAttachedToWindow(): void;
    _onDetachedFromWindow(): void;
    _hasAncestorView(ancestorView: ViewDefinition): boolean;
}
export declare const automationTextProperty: Property<ViewCommon, string>;
export declare const originXProperty: Property<ViewCommon, number>;
export declare const originYProperty: Property<ViewCommon, number>;
export declare const isEnabledProperty: Property<ViewCommon, boolean>;
export declare const isUserInteractionEnabledProperty: Property<ViewCommon, boolean>;
//# sourceMappingURL=view-common.d.ts.map